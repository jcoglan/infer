grammar Infer.Prolog.Program

program         <-  _ (entry _)*                                    %mk_program

entry           <-  fact / rule
fact            <-  head _ "."                                      %mk_fact
rule            <-  head _ ":-" _ goal (comma goal)* _ "."          %mk_rule

head            <-  expr
goal            <-  cut / expr

expr            <-  comparison / comparable
comparable      <-  sum / summand
summand         <-  product / factor
factor          <-  integer / variable / list / compound / atom

cut             <-  "!"                                             %mk_cut

comparison      <-  comparable _ comparator _ expr                  %mk_infix
sum             <-  summand _ [+-] _ comparable                     %mk_infix
product         <-  factor _ [*/] _ summand                         %mk_infix

comparator      <-  "=:=" / "=\\="
                 /  "=<" / "<" / ">=" / ">"
                 /  "=" / "is"

list            <-  "[" _ list_contents? _ "]"                      %mk_list
list_contents   <-  expr (comma expr)* (_ "|" _ expr)?              %mk_list_contents

compound        <-  atom "(" _ expr (comma expr)* _ ")"             %mk_compound

variable        <-  [A-Z_] [A-Za-z0-9_]*                            %mk_var
integer         <-  "-"? [0-9]+                                     %mk_integer
atom            <-  [^\[\]|()\sA-Z!,.;-]+                           %mk_atom

comma           <-  _ "," _

comment         <-  "%" [^\n]* / "/*" (!"*/" .)* "*/"
_               <-  (comment / [\s])*

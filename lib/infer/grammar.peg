grammar Infer.Grammar

language      <-  _ (block _)*                                %mk_language

block         <-  extends_blk / syntax_blk / rule_blk
               /  proof_block / loop_block
               /  text

extends_blk   <-  ("extends" / "import") sp+ [^\s]+           %mk_extends

syntax_blk    <-  "syntax" _ lb _ (syntax_smt _)* rb          %mk_syntax_block
syntax_smt    <-  var assign expr (_ "/" _ el:expr)*          %mk_syntax_clause

rule_blk      <-  "rule" sp+ keyword _ (cut _)?
                  lb _ rule_exprs _ rb                        %mk_rule

rule_exprs    <-  (rule_expr (_ "/" _ rule_expr)* sp* then _)? rule_expr
then          <-  nl sp* "-"+ sp* nl

rule_expr     <-  rule_smt (sp* el:rule_smt)*                 %mk_expr
rule_smt      <-  cut / rule_sub / keyword / refvar
rule_sub      <-  "(" _ rule_expr _ ")"                       %mk_sub_expr

proof_block   <-  "prove" _ lb _ expr _ rb                    %mk_proof
loop_block    <-  "loop" _ keyword _ lb _ expr _ rb           %mk_loop

expr          <-  element (_ el:element)*                     %mk_expr
element       <-  sub_expr / keyword / refvar
sub_expr      <-  "(" _ expr _ ")"                            %mk_sub_expr

text          <-  [^\n\r]* [\n\r]

lb            <-  "{"
rb            <-  "}"

var           <-  "$" ([A-Za-z]+ / .) [0-9]* "'"*             %mk_var
refvar        <-  var !assign                                 %mk_refvar
assign        <-  _ "::=" _

cut           <-  "<!>"                                       %mk_cut

keyword       <-  [A-Za-z0-9] [A-Za-z0-9-]*                   %mk_keyword
               /  [^A-Za-z0-9\s(){}/$#]+                      %mk_keyword

comment       <-  "#" [^\n\r]*
sp            <-  [ \t] / comment
nl            <-  [\n\r]
_             <-  (sp / nl)*

# → {}
# Figure 11-7: Records, p129

# extends ./9-1-pure-simply-typed-lambda-calculus.txt
extends ./typed-lambda-booleans-and-numbers.txt

syntax {
  # much like for 11-6: tuples, we define records recursively

  $r := ⊥
      | $l: $t, $r

  $t := ...
      | $r
      | $r . $l

  $rv := ⊥
       | $l: $v, $rv

  $v := ...
      | $rv

  $rT := ⊥
       | $l: $T, $rT

  $T := ...
      | $rT
}


# Evaluation

rule E-ProjRcd {
  (($l: $v, $rv) . $l) -> $v
}

rule E-ProjRcd-1 {
        ($rv . $l) -> $v2
  -----------------------------
  (($l1: $v1, $rv) . $l) -> $v2
}

rule E-Proj {
         $t1 -> $t1'
  -------------------------
  ($t1 . $l) -> ($t1' . $l)
}

rule E-Rcd {
            $t1 -> $t1'
  -------------------------------
  ($l: $t1, $r) -> ($l: $t1', $r)
}

rule E-Rcd1 {
             $r -> $r'
  -------------------------------
  ($l: $v1, $r) -> ($l: $v1, $r')
}


# Typing

rule T-Rcd-Null {
  $Γ ⊢ ⊥ : ⊥
}

rule T-Rcd {
    $Γ ⊢ $t : $T | $Γ ⊢ $r : $R
  --------------------------------
  $Γ ⊢ ($l: $t, $r) : ($l: $T, $R)
}

rule T-Proj {
  $Γ ⊢ ($l: $t, $r) : ($l: $T, $R)
  --------------------------------
    $Γ ⊢ (($l: $t, $r) . $l) : $T
}

rule T-Proj-1 {
        $Γ ⊢ ($r . $l) : $T2
  -------------------------------
  $Γ ⊢ (($l1: $t, $r) . $l) : $T2
}

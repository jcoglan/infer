# → let
# Figure 11-4: Let binding, p124

# extends ./9-1-pure-simply-typed-lambda-calculus.txt
extends ./typed-lambda-booleans-and-numbers.txt

syntax {
  $t := ... | let $x=$t in $t
}

rule E-LetV {
  (let $x=$v1 in $t2) -> ([$x ↦ $v1] $t2)
}

rule E-Let {
                  $t1 -> $t1'
  -------------------------------------------
  (let $x=$t1 in $t2) -> (let $x=$t1' in $t2)
}

rule T-Let {
  $Γ ⊢ $t1 : $T1 | ($Γ, $x : $T1) ⊢ $t2 : $T2
  -------------------------------------------
        $Γ ⊢ (let $x=$t1 in $t2) : $T2
}
